name: ekiosk-ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  
jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create .env.prod file
        run: |
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env.prod
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env.prod
          echo "DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> .env.prod
          echo "DB_ENGINE=${{ secrets.DB_ENGINE }}" >> .env.prod
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env.prod
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.prod
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env.prod
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env.prod
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env.prod
          echo "OIDC_RP_CLIENT_ID=${{ secrets.OIDC_RP_CLIENT_ID }}" >> .env.prod
          echo "OIDC_RP_CLIENT_SECRET=${{ secrets.OIDC_RP_CLIENT_SECRET }}" >> .env.prod
          echo "OIDC_RP_SIGN_ALGO=${{ secrets.OIDC_RP_SIGN_ALGO }}" >> .env.prod
          echo "ATSK_API_KEY=${{ secrets.ATSK_API_KEY }}" >> .env.prod
          echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env.prod
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env.prod
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env.prod
      
      - name: Build and run Docker Compose
        run: |
          docker compose -f compose.prod.yaml --env-file .env.prod up -d --build

      
      - name: Wait for services to start
        run: sleep 30

      - name: Run tests
        run: |
          docker compose -f compose.prod.yaml exec -T api pytest -v

  push-to-dockerhub:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
      
      - name: Build Docker image
        run: |
          docker build -f src/Dockerfile.prod --no-cache -t ekiosk-api .
    
      - name: Tag and push Docker image
        run: |
          docker tag ekiosk-api ${{ secrets.DOCKER_HUB_USERNAME }}/ekiosk-api:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ekiosk-api:latest